// path: apps/api/prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm]
}

model MediaAsset {
  id          String   @id @default(cuid())
  url         String // FS: /uploads/abc.png; S3: URL pública
  mime        String
  size        Int
  contentHash String
  ownerType   String?
  ownerId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerType, ownerId])
  @@index([contentHash])
}

model Category {
  id          String   @id
  slug        String   @unique
  parentId    String?
  kind        String // "product" | "service"
  level       Int // 1..4
  namePt      String
  nameEn      String
  nameEs      String
  pathSlugs   String[]
  pathNamesPt String[]
  pathNamesEn String[]
  pathNamesEs String[]
  active      Boolean  @default(true)
  sort        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
  services ServiceOffering[]

  @@index([slug])
  @@index([kind, level])
  @@index([parentId])
  @@index([pathSlugs], type: Gin)
}

model CategorySpec {
  id           String   @id @default(cuid())
  categoryId   String
  version      String // semântico, ex: 1.0.0
  inheritsFrom String? // opcional (outro categoryId)
  jsonSchema   Json
  uiSchema     Json
  indexHints   String[]
  createdAt    DateTime @default(now())

  @@unique([categoryId, version])
  @@index([categoryId])
}

model Product {
  id                    String        @id @default(uuid())
  daoId                 String
  title                 String
  description           String?
  priceBzr              Decimal       @db.Decimal(20, 12)
  categoryId            String
  categoryPath          String[]
  attributes            Json
  attributesSpecVersion String
  sellerUserId          String?
  sellerStoreId         String?
  onChainStoreId        BigInt?       @db.BigInt
  status                ProductStatus @default(PUBLISHED)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  category    Category       @relation(fields: [categoryId], references: [id])
  sellerStore SellerProfile? @relation(fields: [sellerStoreId], references: [id])

  @@index([daoId])
  @@index([categoryId])
  @@index([categoryPath], type: Gin)
  @@index([title])
  @@index([description])
  @@index([attributes], type: Gin)
  @@index([priceBzr])
  @@index([createdAt])
  @@index([sellerUserId])
  @@index([status])
  @@index([sellerStoreId])
  @@index([onChainStoreId])
}

model ServiceOffering {
  id                    String   @id @default(uuid())
  daoId                 String
  title                 String
  description           String?
  basePriceBzr          Decimal? @db.Decimal(20, 12)
  categoryId            String
  categoryPath          String[]
  attributes            Json
  attributesSpecVersion String
  sellerStoreId         String?
  onChainStoreId        BigInt?  @db.BigInt
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  category    Category       @relation(fields: [categoryId], references: [id])
  sellerStore SellerProfile? @relation(fields: [sellerStoreId], references: [id])

  @@index([daoId])
  @@index([categoryId])
  @@index([categoryPath], type: Gin)
  @@index([title])
  @@index([description])
  @@index([attributes], type: Gin)
  @@index([basePriceBzr])
  @@index([createdAt])
  @@index([sellerStoreId])
  @@index([onChainStoreId])
}

model AuditLog {
  id        String   @id @default(cuid())
  entity    String
  entityId  String
  actor     String?
  action    String
  diff      Json?
  ip        String?
  ua        String?
  createdAt DateTime @default(now())

  @@index([entity, entityId])
  @@index([createdAt])
}

model User {
  id        String   @id @default(uuid())
  address   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]

  // Perfis (1:1) e Lojas (1:N)
  profile        Profile?
  sellerProfiles SellerProfile[]

  // Relacionamentos DAO (owner)
  daosOwned Dao[]

  // Notificações
  notifications Notification[]

  // Interações (para feed algorítmico)
  interactions UserInteraction[]

  // Achievements
  achievements UserAchievement[]

  // Quests
  quests UserQuest[]

  // Reports
  reportsCreated ContentReport[] @relation("reporter")
  reportsReviewed ContentReport[] @relation("reviewer")

  // Block & Mute
  blocking UserBlock[] @relation("blocker")
  blockedBy UserBlock[] @relation("blocked")
  muting UserMute[] @relation("muter")
  mutedBy UserMute[] @relation("muted")
}

model AuthNonce {
  id        String    @id @default(uuid())
  address   String
  nonce     String    @unique
  domain    String
  uri       String
  genesis   String
  issuedAt  DateTime
  expiresAt DateTime
  usedAt    DateTime?

  @@index([address])
}

model RefreshToken {
  id        String    @id @default(uuid())
  userId    String
  tokenHash String    @unique
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum OrderStatus {
  CREATED
  PENDING
  ESCROWED
  SHIPPED
  RELEASED
  REFUNDED
  CANCELLED
  TIMEOUT
}

enum PaymentIntentStatus {
  PENDING
  FUNDS_IN
  RELEASED
  REFUNDED
  TIMEOUT
  CANCELLED
}

// Publicação/status de produtos
enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Status de posts
enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum NotificationType {
  FOLLOW
  LIKE
  REPOST
  COMMENT
  MENTION
  BADGE
  REPUTATION
  ACHIEVEMENT_UNLOCKED
  GROUP_INVITE
  GROUP_JOIN_REQUEST
}

model Order {
  id               String      @id @default(uuid())
  buyerAddr        String
  sellerAddr       String
  sellerId         String // DAO ID do vendedor
  sellerStoreId    String?
  subtotalBzr      Decimal     @db.Decimal(30, 0) // subtotal em planck
  shippingBzr      Decimal     @db.Decimal(30, 0) // frete em planck
  totalBzr         Decimal     @db.Decimal(30, 0) // total em planck
  status           OrderStatus @default(CREATED)
  shippingAddress  Json? // endereço de entrega
  shippingOptionId String? // ID da opção de frete
  notes            String? // observações do pedido
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  items          OrderItem[]
  paymentIntents PaymentIntent[]
  escrowLogs     EscrowLog[]

  // === Delivery Relation ===
  deliveryRequest   DeliveryRequest?

  @@index([buyerAddr])
  @@index([sellerAddr])
  @@index([sellerId])
  @@index([sellerStoreId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id                   String   @id @default(cuid())
  orderId              String
  listingId            String // ID do produto/serviço
  kind                 String // 'product' | 'service'
  qty                  Int
  unitPriceBzrSnapshot Decimal  @db.Decimal(30, 0) // preço unitário em planck no momento do pedido
  titleSnapshot        String // título no momento do pedido
  lineTotalBzr         Decimal  @db.Decimal(30, 0) // qty * unitPrice em planck
  createdAt            DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([listingId])
  @@index([kind])
}

model PaymentIntent {
  id            String              @id @default(cuid())
  orderId       String
  amountBzr     Decimal             @db.Decimal(30, 0) // planck
  escrowAddress String
  status        PaymentIntentStatus @default(PENDING)
  txHashIn      String? // hash do depósito
  txHashRelease String?
  txHashRefund  String?
  createdAt     DateTime            @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([status])
  @@index([createdAt])
}

model EscrowLog {
  id          String   @id @default(cuid())
  orderId     String
  kind        String // 'RELEASE_REQUEST' | 'REFUND_REQUEST' | 'TIMEOUT' | ...
  payloadJson Json
  createdAt   DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([kind])
  @@index([createdAt])
}

/// --- Social / Profiles ---

model Profile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  handle         String   @unique
  displayName    String
  bio            String?  @db.Text
  avatarUrl      String?
  bannerUrl      String?
  externalLinks  Json?
  followersCount Int      @default(0)
  followingCount Int      @default(0)
  postsCount     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // === NFT/Identidade Soberana ===
  onChainProfileId BigInt?   @unique @db.BigInt
  reputationScore  Int       @default(0)
  reputationTier   String    @default("bronze")
  metadataCid      String?
  isVerified       Boolean   @default(false)
  lastChainSync    DateTime?

  // === Monetização (MOCK) ===
  cashbackBalance  String    @default("0") // BZR cashback balance (MOCK)

  // === Chat E2EE ===
  chatPublicKey    String?   // Curve25519 public key (base64) for E2EE chat

  // Relations
  posts                 Post[]
  postComments          PostComment[]
  postReposts           PostRepost[]
  postReactions         PostReaction[]
  commentLikes          PostCommentLike[]
  followers             Follow[]                 @relation("follows_following")
  following             Follow[]                 @relation("follows_follower")
  badges                ProfileBadge[]
  reputationEvents      ProfileReputationEvent[]
  handleHistory         HandleHistory[]
  notificationsAsActor  Notification[]           @relation("NotificationActor")
  affiliates            ChatStoreAffiliate[]
  affiliateMarketplaces AffiliateMarketplace[]   @relation("AffiliateMarketplaces")

  // === Delivery Relations ===
  deliveryProfile         DeliveryProfile?
  deliveryRequestsAsDeliverer DeliveryRequest[] @relation("DeliveryPerson")
  storePartnerships       StoreDeliveryPartner[] @relation("StoreDeliveryPartner")

  @@index([onChainProfileId])
  @@index([reputationScore])
  @@index([reputationTier])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  Profile @relation("follows_follower", fields: [followerId], references: [id])
  following Profile @relation("follows_following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followingId])
}

model SellerProfile {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  shopName          String
  shopSlug          String   @unique
  about             String?  @db.Text
  ratingAvg         Float    @default(0)
  ratingCount       Int      @default(0)
  policies          Json?
  avatarUrl         String?
  bannerUrl         String?
  isDefault         Boolean  @default(false)
  onChainStoreId    BigInt?  @db.BigInt
  ownerAddress      String?
  operatorAddresses String[] @default([])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // === Campos de Sincronização On-Chain ===
  syncStatus       String?   @default("pending") // 'pending' | 'syncing' | 'synced' | 'error'
  version          Int?      @default(0) // versão incremental da loja on-chain
  lastSyncBlock    BigInt?   @db.BigInt // último bloco onde foi feita sincronização
  lastPublishedAt  DateTime? // timestamp da última publicação on-chain
  metadataCid      String? // CID do JSON de metadados da loja (store.json)
  categoriesCid    String? // CID do JSON de categorias
  categoriesHash   String? // SHA-256 do JSON de categorias
  productsCid      String? // CID do JSON de produtos/catálogo
  productsHash     String? // SHA-256 do JSON de produtos/catálogo

  // === Address for Pickup ===
  pickupAddress     Json? // { street, number, complement?, city, state, zipCode, lat?, lng?, instructions? }

  // Relations
  products       Product[]
  services       ServiceOffering[]
  publishHistory StorePublishHistory[]

  @@index([userId])
  @@index([onChainStoreId])
  @@index([ownerAddress])
  @@index([operatorAddresses], type: Gin)
  @@index([syncStatus])
}

model Post {
  id        String     @id @default(cuid())
  authorId  String
  author    Profile    @relation(fields: [authorId], references: [id])
  kind      String // 'text' | 'image' | 'link' (MVP: text)
  content   String     @db.Text
  media     Json?
  status    PostStatus @default(PUBLISHED)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  likes     PostLike[]
  reposts   PostRepost[]
  reactions PostReaction[]
  comments  PostComment[]

  @@index([authorId, createdAt])
  @@index([status])
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  profileId String
  createdAt DateTime @default(now())

  @@unique([postId, profileId])
  @@index([postId])
  @@index([profileId])
}

model PostRepost {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, profileId])
  @@index([postId])
  @@index([profileId])
}

model PostReaction {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  reaction  String   // love, laugh, wow, sad, angry
  createdAt DateTime @default(now())

  @@unique([postId, profileId])
  @@index([postId])
  @@index([profileId])
  @@index([postId, reaction])
}

model PostComment {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    Profile  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  parentId  String? // Para respostas aninhadas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent  PostComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies PostComment[] @relation("CommentReplies")
  likes   PostCommentLike[]

  @@index([postId, createdAt])
  @@index([authorId])
  @@index([parentId])
}

model PostCommentLike {
  id        String      @id @default(cuid())
  commentId String
  comment   PostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())

  @@unique([commentId, profileId])
  @@index([commentId])
  @@index([profileId])
}

model Notification {
  id        String             @id @default(cuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  actorId   String?
  actor     Profile?           @relation("NotificationActor", fields: [actorId], references: [id], onDelete: Cascade)
  targetId  String? // ID do post, comment, badge, etc
  metadata  Json? // Dados adicionais específicos do tipo
  read      Boolean            @default(false)
  createdAt DateTime           @default(now())

  @@index([userId, read, createdAt])
  @@index([createdAt])
}

model ProfileBadge {
  id           String    @id @default(cuid())
  profileId    String
  profile      Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  code         String
  label        Json // {pt, en, es}
  issuedBy     String // marketplace, dao, system, etc
  issuedAt     DateTime
  blockNumber  BigInt    @db.BigInt
  revokedAt    DateTime?
  revokeReason String?

  @@unique([profileId, code])
  @@index([profileId])
  @@index([code])
  @@index([issuedAt])
}

model ProfileReputationEvent {
  id          String   @id @default(cuid())
  profileId   String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  eventCode   String // ORDER_COMPLETED, DELIVERY_DONE, etc
  delta       Int
  newTotal    Int
  reason      String?
  emittedBy   String // marketplace, delivery, social, etc
  blockNumber BigInt   @db.BigInt
  extrinsicId String?
  createdAt   DateTime @default(now())

  @@index([profileId, createdAt])
  @@index([eventCode])
  @@index([blockNumber])
}

model HandleHistory {
  id          String   @id @default(cuid())
  profileId   String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  oldHandle   String?
  newHandle   String
  changedAt   DateTime
  blockNumber BigInt   @db.BigInt

  @@index([profileId, changedAt])
  @@index([newHandle])
}

model Dao {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  ownerUserId String?
  owner       User?   @relation(fields: [ownerUserId], references: [id])

  @@index([ownerUserId])
}

model SubDao {
  id          String @id @default(cuid())
  daoId       String
  name        String
  slug        String @unique
  ownerUserId String // User.id (dono/admin)

  @@index([ownerUserId])
}

model ProfileSubDao {
  id        String   @id @default(cuid())
  profileId String
  subDaoId  String
  role      String // 'owner' | 'admin' | 'member'
  createdAt DateTime @default(now())

  @@unique([profileId, subDaoId])
}

/// --- P2P (Offers / Orders) ---

enum P2POfferSide {
  BUY_BZR
  SELL_BZR
}

enum P2POfferStatus {
  ACTIVE
  PAUSED
  ARCHIVED
}

enum P2POrderStatus {
  DRAFT
  AWAITING_ESCROW
  AWAITING_FIAT_PAYMENT
  AWAITING_CONFIRMATION
  RELEASED
  EXPIRED
  CANCELLED
  DISPUTE_OPEN
  DISPUTE_RESOLVED_BUYER
  DISPUTE_RESOLVED_SELLER
}

enum P2PPaymentMethod {
  PIX
}

// FASE 5: Asset types for P2P trading
enum P2PAssetType {
  BZR
  ZARI
}

model P2PPaymentProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  pixKey      String?
  bankName    String?
  accountName String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model P2POffer {
  id             String           @id @default(cuid())
  ownerId        String
  side           P2POfferSide

  // FASE 5: Asset being traded
  assetType      P2PAssetType     @default(BZR)
  assetId        String?          // '1' for ZARI, null for BZR

  // FASE 5: Phase info (only for ZARI)
  phase          String?          // '2A' | '2B' | '3' | null
  phasePrice     Decimal?         @db.Decimal(18, 12) // 0.25 | 0.35 | 0.50 (in BZR)

  // Pricing (now generic)
  priceBRLPerBZR Decimal          @db.Decimal(18, 2)  // Deprecated, use priceBRLPerUnit
  priceBRLPerUnit Decimal?        @db.Decimal(18, 2)  // R$/BZR or R$/ZARI
  minBRL         Decimal          @db.Decimal(18, 2)
  maxBRL         Decimal          @db.Decimal(18, 2)

  method         P2PPaymentMethod
  autoReply      String?
  status         P2POfferStatus   @default(ACTIVE)

  // FASE 5: Expanded stats
  stats          Json?            // { totalSold, totalVolume, phaseSupplyLeft }

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([ownerId, status, side])
  @@index([ownerId, status, side, assetType])
  @@index([assetType, phase, status])
}

model P2POrder {
  id             String           @id @default(cuid())
  offerId        String
  makerId        String
  takerId        String
  side           P2POfferSide

  // FASE 5: Asset info
  assetType      P2PAssetType     @default(BZR)
  assetId        String?          // '1' for ZARI
  phase          String?          // '2A', '2B', '3'

  // Pricing
  priceBRLPerBZR Decimal          @db.Decimal(18, 2)  // Deprecated, use priceBRLPerUnit
  priceBRLPerUnit Decimal?        @db.Decimal(18, 2)
  amountBZR      Decimal          @db.Decimal(38, 18) // Deprecated, use amountAsset
  amountAsset    Decimal?         @db.Decimal(38, 18) // BZR or ZARI
  amountBRL      Decimal          @db.Decimal(18, 2)

  method         P2PPaymentMethod
  status         P2POrderStatus   @default(DRAFT)

  // Escrow on-chain
  escrowTxHash   String?
  escrowAt       DateTime?
  releasedTxHash String?
  releasedAt     DateTime?

  // PIX proof
  pixKeySnapshot  String?
  payerDeclaredAt DateTime?
  proofUrls       Json?

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([makerId, takerId, status])
  @@index([makerId, takerId, status, assetType])
  @@index([offerId])
  @@index([assetType, phase])
}

model P2PMessage {
  id        String   @id @default(cuid())
  orderId   String
  senderId  String
  body      String   @db.Text
  kind      String
  createdAt DateTime @default(now())

  @@index([orderId, createdAt])
}

model P2PDispute {
  id         String   @id @default(cuid())
  orderId    String   @unique
  openedById String
  reason     String
  evidence   Json?
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model P2PReview {
  id        String   @id @default(cuid())
  orderId   String   @unique
  raterId   String
  rateeId   String
  stars     Int
  comment   String?
  createdAt DateTime @default(now())
}

// FASE 5: ZARI Phase Configuration
model ZARIPhaseConfig {
  id          String   @id @default(cuid())
  phase       String   @unique  // '2A', '2B', '3'
  priceBZR    Decimal  @db.Decimal(18, 12)  // 0.25, 0.35, 0.50
  supplyLimit BigInt                         // 2_100_000 * 10^12 (decimals)
  startBlock  BigInt?                        // Block number when phase started
  endBlock    BigInt?                        // Block number when phase ended
  active      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([phase, active])
}

/// --- Store Publishing History ---

model StorePublishHistory {
  id              String        @id @default(cuid())
  sellerProfileId String
  sellerProfile   SellerProfile @relation(fields: [sellerProfileId], references: [id], onDelete: Cascade)
  version         Int // versão incremental
  blockNumber     BigInt        @db.BigInt // bloco em que foi publicado
  extrinsicHash   String? // hash da extrinsic do publish_store
  metadataCid     String // CID do JSON de metadados da loja
  categoriesCid   String // CID do JSON de categorias
  categoriesHash  String // SHA-256 do JSON de categorias
  productsCid     String // CID do JSON de produtos/catálogo
  productsHash    String // SHA-256 do JSON de produtos/catálogo
  publishedAt     DateTime      @default(now())

  @@index([sellerProfileId, version])
  @@index([blockNumber])
  @@index([publishedAt])
}

/// --- Store Snapshots (Cache) ---

model StoreSnapshot {
  id             String   @id @default(cuid())
  storeId        String
  version        Int
  storeJson      Json
  categoriesJson Json?
  productsJson   Json?
  cachedAt       DateTime @default(now())

  @@unique([storeId, version])
  @@index([storeId])
  @@index([cachedAt])
}

// User Interactions for Feed Algorithm
model UserInteraction {
  id              String   @id @default(cuid())
  userId          String
  targetType      String   // POST, PROFILE, PRODUCT
  targetId        String
  interactionType String   // VIEW, LIKE, COMMENT, SHARE
  weight          Float    @default(1.0)
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([targetType, targetId])
  @@index([userId, targetType])
}

model TrendingTopic {
  id        String   @id @default(cuid())
  tag       String   @unique
  count     Int      @default(0)
  score     Float    @default(0)
  growthRate Float?  // Taxa de crescimento vs período anterior
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([score(sort: Desc), updatedAt])
  @@index([updatedAt])
}

model Achievement {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String   @db.Text
  category    String   // SOCIAL, ENGAGEMENT, CONTENT, STREAK
  tier        Int      @default(1) // 1-5 (Bronze to Diamond)
  requirement Json     // { type: "POST_COUNT", value: 1 }
  icon        String?  // Emoji ou URL
  createdAt   DateTime @default(now())

  userAchievements UserAchievement[]

  @@index([category, tier])
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  progress      Int       @default(0) // Progresso atual
  unlockedAt    DateTime? // null = ainda bloqueado
  createdAt     DateTime  @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId, unlockedAt])
  @@index([achievementId])
}

model Quest {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String   @db.Text
  type        String   // POST, LIKE, COMMENT, FOLLOW
  target      Int      // Quantidade necessária
  reward      Int      // Pontos de reward
  icon        String?
  createdAt   DateTime @default(now())

  userQuests UserQuest[]

  @@index([type])
}

model UserQuest {
  id          String    @id @default(cuid())
  userId      String
  questId     String
  progress    Int       @default(0)
  completedAt DateTime? // null = não completado
  claimedAt   DateTime? // null = reward não reivindicado
  date        String    // YYYY-MM-DD para track diário
  createdAt   DateTime  @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest Quest @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@unique([userId, questId, date])
  @@index([userId, date])
  @@index([questId, date])
}

enum ReportReason {
  SPAM
  HARASSMENT
  INAPPROPRIATE
  MISINFORMATION
  VIOLENCE
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

model ContentReport {
  id          String       @id @default(cuid())
  reporterId  String
  contentType String       // POST, COMMENT, PROFILE
  contentId   String
  reason      ReportReason
  details     String?      @db.Text
  status      ReportStatus @default(PENDING)
  reviewedBy  String?
  reviewedAt  DateTime?
  createdAt   DateTime     @default(now())

  reporter User  @relation("reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reviewer User? @relation("reviewer", fields: [reviewedBy], references: [id])

  @@index([status, createdAt])
  @@index([contentType, contentId])
  @@index([reporterId])
}

model UserBlock {
  id            String   @id @default(cuid())
  userId        String
  blockedUserId String
  createdAt     DateTime @default(now())

  user        User @relation("blocker", fields: [userId], references: [id], onDelete: Cascade)
  blockedUser User @relation("blocked", fields: [blockedUserId], references: [id], onDelete: Cascade)

  @@unique([userId, blockedUserId])
  @@index([userId])
  @@index([blockedUserId])
}

model UserMute {
  id           String   @id @default(cuid())
  userId       String
  mutedUserId  String
  createdAt    DateTime @default(now())

  user      User @relation("muter", fields: [userId], references: [id], onDelete: Cascade)
  mutedUser User @relation("muted", fields: [mutedUserId], references: [id], onDelete: Cascade)

  @@unique([userId, mutedUserId])
  @@index([userId])
  @@index([mutedUserId])
}

// ===========================
// BazChat Models (FASE 0)
// ===========================

model ChatThread {
  id             String   @id @default(uuid())
  kind           String   // dm | store | order | group
  participants   String[] // profileIds
  orderId        String?
  groupId        String?
  lastMessageAt  BigInt
  metadata       Json?
  createdAt      BigInt
  updatedAt      BigInt

  messages       ChatMessage[]
  proposals      ChatProposal[]

  @@index([participants])
  @@index([lastMessageAt(sort: Desc)])
  @@index([kind])
}

model ChatMessage {
  id           String   @id @default(uuid())
  threadId     String
  fromProfile  String
  type         String   // text | audio | image | file | video | proposal | checkout | payment | system
  ciphertext   String   @db.Text
  mediaCid     String?
  meta         Json?
  createdAt    BigInt
  deliveredAt  BigInt?
  readAt       BigInt?
  replyTo      String?
  editedAt     BigInt?

  thread       ChatThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId, createdAt(sort: Desc)])
  @@index([fromProfile])
  @@index([type])
}

model ChatGroup {
  id          String   @id @default(uuid())
  name        String
  description String?
  avatarUrl   String?
  kind        String   @default("community") // community | channel | dao
  isPublic    Boolean  @default(false)
  adminIds    String[]
  memberIds   String[]
  maxMembers  Int?     @default(500)
  metadata    Json?
  createdAt   BigInt

  @@index([adminIds])
  @@index([memberIds])
  @@index([kind])
  @@index([isPublic])
}

model ChatProposal {
  id                String   @id @default(uuid())
  threadId          String
  sellerId          String
  buyerId           String?
  items             Json     // ProposalItem[]
  subtotal          Decimal  @db.Decimal(20, 8)
  shipping          Json?
  total             Decimal  @db.Decimal(20, 8)
  commissionPercent Int

  // Multi-Store Support
  isMultiStore      Boolean  @default(false)
  storeGroups       Json?    // Array de StoreGroup[]

  status            String   @default("draft") // draft | sent | accepted | expired | paid
  expiresAt         BigInt?
  createdAt         BigInt
  updatedAt         BigInt

  thread            ChatThread @relation(fields: [threadId], references: [id])
  sales             AffiliateSale[]

  @@index([threadId])
  @@index([sellerId])
  @@index([status])
}

model StoreCommissionPolicy {
  storeId             BigInt   @id
  mode                String   @default("open") // open | followers | affiliates
  percent             Int      @default(5)
  minReputation       Int?
  dailyCommissionCap  Decimal? @db.Decimal(20, 8)
  allowMultiStore     Boolean  @default(true) // FASE 8: Multi-Store Proposals
  createdAt           BigInt
  updatedAt           BigInt
}

model ChatMission {
  id              String                   @id @default(uuid())
  title           String
  description     String
  reward          Decimal                  @db.Decimal(20, 8)
  type            String                   // share | review | referral | custom
  kind            String                   @default("custom") // onboarding | referral | sales | engagement
  goal            Int                      @default(1) // Quantidade necessária para completar
  requirements    Json?
  maxCompletions  Int?
  completedCount  Int                      @default(0)
  expiresAt       BigInt?
  status          String                   @default("active") // active | paused | completed
  isActive        Boolean                  @default(true)
  createdBy       String
  createdAt       BigInt
  completions     ChatMissionCompletion[]

  @@index([status, expiresAt])
  @@index([createdBy])
  @@index([isActive])
}

model ChatMissionCompletion {
  profileId   String
  missionId   String
  progress    Int     @default(0)
  completedAt BigInt?
  mission     ChatMission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@id([profileId, missionId])
  @@index([profileId])
  @@index([missionId])
}

model ChatOpportunity {
  id           String   @id @default(uuid())
  storeId      BigInt
  title        String
  description  String
  type         String   // job | freelance | partnership
  compensation String?
  requirements Json?
  status       String   @default("open") // open | filled | closed
  createdAt    BigInt
  expiresAt    BigInt?

  @@index([storeId])
  @@index([status])
}

// AffiliateSale - MOCK de vendas on-chain (FASE 3)
// Esta tabela simula o que seria armazenado na blockchain
// Será substituída por integração real posteriormente
model AffiliateSale {
  id                 String                    @id @default(uuid())

  // Link para marketplace (NOVO)
  marketplaceId      String?
  marketplace        AffiliateMarketplace?     @relation(fields: [marketplaceId], references: [id])

  storeId            BigInt
  buyer              String        // profileId
  seller             String        // profileId
  promoter           String?       // profileId (opcional)
  amount             Decimal       @db.Decimal(20, 8)
  commissionPercent  Int           @default(0)
  commissionAmount   Decimal       @default(0) @db.Decimal(20, 8)
  bazariFee          Decimal       @default(0) @db.Decimal(20, 8)
  sellerAmount       Decimal       @db.Decimal(20, 8)
  status             String        @default("pending") // pending, split, failed
  txHash             String?       // Mock transaction hash
  receiptNftCid      String?       // IPFS CID do recibo NFT
  proposalId         String?
  proposal           ChatProposal? @relation(fields: [proposalId], references: [id])
  createdAt          BigInt
  settledAt          BigInt?

  @@index([storeId])
  @@index([buyer])
  @@index([seller])
  @@index([promoter])
  @@index([marketplaceId])  // NOVO
  @@index([status])
  @@index([proposalId])
  @@index([createdAt(sort: Desc)])
}


// === FASE 7: Social Features ===

// Trust Badges NFT (MOCK)
model ChatTrustBadge {
  id        String  @id
  profileId String
  level     String  // bronze | silver | gold | platinum
  nftId     String? // Mock NFT ID
  isActive  Boolean @default(true)
  issuedAt  BigInt

  @@index([profileId])
  @@index([isActive])
}

// Denúncias e Moderação (MOCK)
model ChatReport {
  id              String  @id
  reporterId      String
  reportedId      String
  contentType     String  // message | profile | group
  contentId       String
  reason          String
  description     String  @default("")
  status          String  @default("pending") // pending | under_review | resolved
  votes           Int     @default(0)
  approveVotes    Int     @default(0)
  rejectVotes     Int     @default(0)
  resolution      String? // warning | suspend | ban | dismiss
  resolvedBy      String?
  resolvedAt      BigInt?
  resolutionNotes String?
  createdAt       BigInt

  @@index([reporterId])
  @@index([reportedId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
}

model ChatReportVote {
  reportId String
  voterId  String
  vote     String // approve | reject
  weight   Int    @default(1)
  votedAt  BigInt

  @@id([reportId, voterId])
  @@index([reportId])
  @@index([voterId])
}

// Polls em Grupos
model ChatGroupPoll {
  id        String  @id
  groupId   String
  creatorId String
  question  String
  options   Json    // Array de opções
  votes     Json    @default("{}") // Map de voterId -> optionIndex
  endsAt    BigInt?
  createdAt BigInt

  @@index([groupId])
  @@index([createdAt(sort: Desc)])
}

// === FASE 8: Affiliate System ===

// Sistema de Afiliados - Gerenciamento de promotores aprovados
model ChatStoreAffiliate {
  id                String   @id @default(uuid())
  storeId           BigInt   // ID on-chain da loja
  promoterId        String   // profileId do promotor
  promoter          Profile  @relation(fields: [promoterId], references: [id], onDelete: Cascade)

  // Status
  status            String   @default("pending") // pending | approved | rejected | suspended

  // Comissão customizada (opcional - override da política geral)
  customCommission  Int?     // Se null, usa a política da loja

  // Limites opcionais
  monthlySalesCap   Decimal? @db.Decimal(20, 8) // Limite mensal de vendas

  // Metadata
  notes             String?  @db.Text // Notas do dono da loja

  // Timestamps
  requestedAt       BigInt   // Quando solicitou
  approvedAt        BigInt?  // Quando foi aprovado
  rejectedAt        BigInt?  // Quando foi rejeitado
  suspendedAt       BigInt?  // Quando foi suspenso

  // Performance (calculado periodicamente)
  totalSales        Decimal  @default(0) @db.Decimal(20, 8)
  totalCommission   Decimal  @default(0) @db.Decimal(20, 8)
  salesCount        Int      @default(0)

  createdAt         BigInt
  updatedAt         BigInt

  @@unique([storeId, promoterId])
  @@index([promoterId])
  @@index([storeId, status])
}

// Sistema de Convites de Afiliado (Opcional)
model ChatAffiliateInvite {
  id          String   @id @default(uuid())
  storeId     BigInt
  inviteCode  String   @unique // Código único de convite

  // Configurações do convite
  maxUses     Int?     // Número máximo de usos (null = ilimitado)
  usesCount   Int      @default(0)
  expiresAt   BigInt?  // Data de expiração

  // Auto-aprovação
  autoApprove Boolean  @default(false)

  // Comissão padrão para quem usar este convite
  defaultCommission Int @default(5)

  createdAt   BigInt

  @@index([storeId])
}

// === MARKETPLACE DO AFILIADO ===

// Marketplace personalizado do afiliado (vitrine)
model AffiliateMarketplace {
  id                String   @id @default(uuid())
  ownerId           String
  owner             Profile  @relation("AffiliateMarketplaces", fields: [ownerId], references: [id], onDelete: Cascade)

  // Branding
  name              String
  slug              String   @unique
  description       String?  @db.Text
  logoUrl           String?
  bannerUrl         String?
  theme             String   @default("bazari")
  primaryColor      String?
  secondaryColor    String?

  // Metadados IPFS (opcional)
  metadataCid       String?

  // Estatísticas (cache)
  totalSales        Int      @default(0)
  totalRevenue      Decimal  @default(0) @db.Decimal(20, 8)
  totalCommission   Decimal  @default(0) @db.Decimal(20, 8)
  productCount      Int      @default(0)

  // Status
  isActive          Boolean  @default(true)
  isPublic          Boolean  @default(true)

  createdAt         BigInt
  updatedAt         BigInt

  products          AffiliateProduct[]
  sales             AffiliateSale[]

  @@index([ownerId])
  @@index([slug])
  @@index([isActive, isPublic])
}

// Produtos adicionados à vitrine do afiliado
model AffiliateProduct {
  id                String              @id @default(uuid())
  marketplaceId     String
  marketplace       AffiliateMarketplace @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)

  // Produto original
  storeId           BigInt
  productId         String
  productName       String
  productImageUrl   String?
  productPrice      Decimal             @db.Decimal(20, 8)

  // Comissão
  commissionPercent Int

  // Customizações (opcional)
  customDescription String?             @db.Text
  customImageUrl    String?
  featured          Boolean             @default(false)

  // Tracking
  viewCount         Int                 @default(0)
  clickCount        Int                 @default(0)

  addedAt           BigInt
  updatedAt         BigInt

  @@unique([marketplaceId, storeId, productId])
  @@index([marketplaceId])
  @@index([storeId])
}

// ===========================
// DELIVERY NETWORK (FASE 1)
// ===========================

model DeliveryRequest {
  id                String   @id @default(uuid())

  // Origem da demanda
  sourceType        String   // "order" | "direct"
  orderId           String?  @unique
  order             Order?   @relation(fields: [orderId], references: [id])

  // Endereços
  pickupAddress     Json     // { street, number, complement?, city, state, zipCode, country, lat?, lng?, contactName?, contactPhone? }
  deliveryAddress   Json     // { street, number, complement?, city, state, zipCode, country, lat?, lng?, contactName?, contactPhone? }

  // Partes Envolvidas
  senderId          String   // storeId (SellerProfile.id) ou profileId
  senderType        String   // "store" | "profile"
  recipientId       String   // profileId do destinatário

  // Detalhes da Carga
  packageType       String   // "envelope" | "small_box" | "medium_box" | "large_box" | "fragile" | "perishable" | "custom"
  weight            Float?   @db.Real // em kg
  dimensions        Json?    // { length: float, width: float, height: float } em cm
  estimatedValue    Decimal? @db.Decimal(20, 8) // valor estimado da mercadoria (para seguro)
  notes             String?  @db.Text
  requiresSignature Boolean  @default(true)

  // Valor e Pagamento
  deliveryFeeBzr    Decimal  @db.Decimal(20, 8)
  distance          Float?   @db.Real // em km (calculado)

  // Status
  status            String   @default("pending")
  // "pending" → "assigned" → "accepted" → "picked_up" → "in_transit" → "delivered" → "completed"
  // ou "cancelled" | "failed"

  // Entregador
  deliveryPersonId  String?
  deliveryPerson    Profile? @relation("DeliveryPerson", fields: [deliveryPersonId], references: [id])

  // Rede de Entregadores
  preferredDeliverers String[] @default([]) // profileIds (ordem de prioridade)
  isPrivateNetwork    Boolean  @default(false) // true = só rede vinculada pode ver
  notifiedDeliverers  String[] @default([]) // histórico de quem foi notificado

  // Tracking de Tempo
  createdAt         BigInt
  updatedAt         BigInt
  expiresAt         BigInt?  // prazo limite para aceite
  assignedAt        BigInt?  // quando foi atribuído
  acceptedAt        BigInt?  // quando entregador aceitou
  pickedUpAt        BigInt?  // quando coletou
  inTransitAt       BigInt?  // quando iniciou trânsito
  deliveredAt       BigInt?  // quando entregou
  completedAt       BigInt?  // quando foi finalizado/pago
  cancelledAt       BigInt?

  // Escrow e Pagamento
  escrowAddress     String?
  paymentTxHash     String?  // hash da transação de pagamento
  releaseTxHash     String?  // hash da liberação do escrow

  // Prova de Entrega
  proofOfDelivery   Json?    // { signature?, photo_urls?: string[], timestamp: bigint }

  // Avaliação
  rating            Int?     // 1-5 estrelas
  reviewComment     String?  @db.Text

  // Metadados
  metadata          Json?    // campo flexível para dados extras

  @@index([status])
  @@index([senderId, senderType])
  @@index([deliveryPersonId])
  @@index([orderId])
  @@index([createdAt])
  @@index([isPrivateNetwork])
}

model StoreDeliveryPartner {
  id                String   @id @default(uuid())

  // Relação
  storeId           BigInt   // SellerProfile.onChainStoreId
  deliveryPersonId  String   // Profile.id
  deliveryPerson    Profile  @relation("StoreDeliveryPartner", fields: [deliveryPersonId], references: [id], onDelete: Cascade)

  // Configurações
  status            String   @default("pending") // "pending" | "active" | "paused" | "suspended" | "rejected"
  priority          Int      @default(1) // 1 = primeira oferta, 2 = segunda, etc.

  // Comissão e Financeiro
  commissionPercent Int      @default(100) // % do deliveryFeeBzr que vai para o entregador
  bonusPerDelivery  Decimal? @db.Decimal(20, 8) // bônus fixo por entrega

  // Restrições
  maxDailyDeliveries Int?    // limite de entregas por dia (null = sem limite)
  allowedDays       String[] @default([]) // ["monday", "tuesday", ...] - vazio = todos os dias
  workingHoursStart String?  // "08:00"
  workingHoursEnd   String?  // "18:00"

  // Métricas (cache)
  totalDeliveries   Int      @default(0)
  completedDeliveries Int    @default(0)
  cancelledDeliveries Int    @default(0)
  avgRating         Float    @default(0)
  avgDeliveryTime   Float?   @db.Real // em minutos
  onTimeRate        Float    @default(100.0) // %

  // Timestamps
  requestedAt       BigInt?  // quando entregador solicitou
  approvedAt        BigInt?  // quando loja aprovou
  rejectedAt        BigInt?
  suspendedAt       BigInt?
  createdAt         BigInt
  updatedAt         BigInt

  // Notas
  notes             String?  @db.Text // notas privadas da loja sobre o entregador
  rejectionReason   String?  @db.Text

  @@unique([storeId, deliveryPersonId])
  @@index([storeId, status])
  @@index([deliveryPersonId, status])
  @@index([priority])
}

model DeliveryProfile {
  id                String   @id @default(uuid())
  profileId         String   @unique
  profile           Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Documentação
  fullName          String
  documentType      String   // "cpf" | "cnpj" | "passport"
  documentNumber    String   @unique
  phoneNumber       String
  emergencyContact  Json?    // { name: string, phone: string, relationship: string }

  // Veículo
  vehicleType       String   // "bike" | "motorcycle" | "car" | "van" | "truck"
  vehiclePlate      String?
  vehicleModel      String?
  vehicleYear       Int?
  vehicleColor      String?

  // Capacidades
  maxWeight         Float    @db.Real // kg
  maxVolume         Float    @db.Real // m³
  canCarryFragile   Boolean  @default(false)
  canCarryPerishable Boolean @default(false)
  hasInsulatedBag   Boolean  @default(false) // bag térmica

  // Disponibilidade
  isAvailable       Boolean  @default(false)
  isOnline          Boolean  @default(false) // conectado no momento
  currentLat        Float?   @db.Real
  currentLng        Float?   @db.Real
  currentAccuracy   Float?   @db.Real // em metros
  lastLocationUpdate BigInt?

  // Área de Atuação
  serviceRadius     Float    @default(10.0) @db.Real // km
  serviceCities     String[] @default([]) // ["Rio de Janeiro", "Niterói"]
  serviceStates     String[] @default([]) // ["RJ"]
  preferredNeighborhoods String[] @default([])

  // Estatísticas
  totalDeliveries   Int      @default(0)
  completedDeliveries Int    @default(0)
  cancelledDeliveries Int    @default(0)
  avgRating         Float    @default(0)
  totalRatings      Int      @default(0)
  onTimeRate        Float    @default(100.0) // %
  acceptanceRate    Float    @default(100.0) // % de entregas aceitas vs oferecidas
  completionRate    Float    @default(100.0) // % de entregas completadas vs aceitas

  // Performance
  avgDeliveryTime   Float?   @db.Real // tempo médio em minutos
  fastestDelivery   Float?   @db.Real // entrega mais rápida (minutos)
  totalDistance     Float    @default(0) @db.Real // km acumulados

  // Financeiro
  walletAddress     String?  // endereço blockchain para receber pagamentos
  totalEarnings     Decimal  @default(0) @db.Decimal(20, 8) // BZR ganhos (histórico)
  pendingEarnings   Decimal  @default(0) @db.Decimal(20, 8) // BZR em escrow

  // Verificação
  isVerified        Boolean  @default(false)
  verificationLevel String   @default("basic") // "basic" | "intermediate" | "advanced"
  backgroundCheckCompleted Boolean @default(false)
  backgroundCheckDate BigInt?

  // Configurações
  autoAcceptRadius  Float?   @db.Real // km - aceita automaticamente dentro desse raio
  minDeliveryFee    Decimal? @db.Decimal(20, 8) // valor mínimo de entrega que aceita
  notificationsEnabled Boolean @default(true)

  // Status da Conta
  accountStatus     String   @default("active") // "active" | "suspended" | "banned" | "under_review"
  suspensionReason  String?  @db.Text
  suspendedUntil    BigInt?

  // Timestamps
  createdAt         BigInt
  updatedAt         BigInt
  lastActiveAt      BigInt?
  verifiedAt        BigInt?

  @@index([isAvailable, isOnline])
  @@index([profileId])
  @@index([documentNumber])
  @@index([serviceRadius])
  @@index([accountStatus])
}
