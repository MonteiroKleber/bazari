// path: apps/api/prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm]
}

model MediaAsset {
  id          String   @id @default(cuid())
  url         String // FS: /uploads/abc.png; S3: URL pública
  mime        String
  size        Int
  contentHash String
  ownerType   String?
  ownerId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerType, ownerId])
  @@index([contentHash])
}

model Category {
  id          String   @id
  slug        String   @unique
  parentId    String?
  kind        String // "product" | "service"
  level       Int // 1..4
  namePt      String
  nameEn      String
  nameEs      String
  pathSlugs   String[]
  pathNamesPt String[]
  pathNamesEn String[]
  pathNamesEs String[]
  active      Boolean  @default(true)
  sort        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
  services ServiceOffering[]

  @@index([slug])
  @@index([kind, level])
  @@index([parentId])
  @@index([pathSlugs], type: Gin)
}

model CategorySpec {
  id           String   @id @default(cuid())
  categoryId   String
  version      String // semântico, ex: 1.0.0
  inheritsFrom String? // opcional (outro categoryId)
  jsonSchema   Json
  uiSchema     Json
  indexHints   String[]
  createdAt    DateTime @default(now())

  @@unique([categoryId, version])
  @@index([categoryId])
}

model Product {
  id                    String        @id @default(uuid())
  daoId                 String
  title                 String
  description           String?
  priceBzr              Decimal       @db.Decimal(20, 12)
  categoryId            String
  categoryPath          String[]
  attributes            Json
  attributesSpecVersion String
  sellerUserId          String?
  sellerStoreId         String?
  onChainStoreId        BigInt?       @db.BigInt
  status                ProductStatus @default(PUBLISHED)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  category    Category       @relation(fields: [categoryId], references: [id])
  sellerStore SellerProfile? @relation(fields: [sellerStoreId], references: [id])

  @@index([daoId])
  @@index([categoryId])
  @@index([categoryPath], type: Gin)
  @@index([title])
  @@index([description])
  @@index([attributes], type: Gin)
  @@index([priceBzr])
  @@index([createdAt])
  @@index([sellerUserId])
  @@index([status])
  @@index([sellerStoreId])
  @@index([onChainStoreId])
}

model ServiceOffering {
  id                    String   @id @default(uuid())
  daoId                 String
  title                 String
  description           String?
  basePriceBzr          Decimal? @db.Decimal(20, 12)
  categoryId            String
  categoryPath          String[]
  attributes            Json
  attributesSpecVersion String
  sellerStoreId         String?
  onChainStoreId        BigInt?  @db.BigInt
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  category    Category       @relation(fields: [categoryId], references: [id])
  sellerStore SellerProfile? @relation(fields: [sellerStoreId], references: [id])

  @@index([daoId])
  @@index([categoryId])
  @@index([categoryPath], type: Gin)
  @@index([title])
  @@index([description])
  @@index([attributes], type: Gin)
  @@index([basePriceBzr])
  @@index([createdAt])
  @@index([sellerStoreId])
  @@index([onChainStoreId])
}

model AuditLog {
  id        String   @id @default(cuid())
  entity    String
  entityId  String
  actor     String?
  action    String
  diff      Json?
  ip        String?
  ua        String?
  createdAt DateTime @default(now())

  @@index([entity, entityId])
  @@index([createdAt])
}

model User {
  id        String   @id @default(uuid())
  address   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]

  // Perfis (1:1) e Lojas (1:N)
  profile        Profile?
  sellerProfiles SellerProfile[]

  // Relacionamentos DAO (owner)
  daosOwned Dao[]
}

model AuthNonce {
  id        String    @id @default(uuid())
  address   String
  nonce     String    @unique
  domain    String
  uri       String
  genesis   String
  issuedAt  DateTime
  expiresAt DateTime
  usedAt    DateTime?

  @@index([address])
}

model RefreshToken {
  id        String    @id @default(uuid())
  userId    String
  tokenHash String    @unique
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum OrderStatus {
  CREATED
  PENDING
  ESCROWED
  SHIPPED
  RELEASED
  REFUNDED
  CANCELLED
  TIMEOUT
}

enum PaymentIntentStatus {
  PENDING
  FUNDS_IN
  RELEASED
  REFUNDED
  TIMEOUT
  CANCELLED
}

// Publicação/status de produtos
enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Status de posts
enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Order {
  id               String      @id @default(uuid())
  buyerAddr        String
  sellerAddr       String
  sellerId         String // DAO ID do vendedor
  sellerStoreId    String?
  subtotalBzr      Decimal     @db.Decimal(30, 0) // subtotal em planck
  shippingBzr      Decimal     @db.Decimal(30, 0) // frete em planck
  totalBzr         Decimal     @db.Decimal(30, 0) // total em planck
  status           OrderStatus @default(CREATED)
  shippingAddress  Json? // endereço de entrega
  shippingOptionId String? // ID da opção de frete
  notes            String? // observações do pedido
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  items          OrderItem[]
  paymentIntents PaymentIntent[]
  escrowLogs     EscrowLog[]

  @@index([buyerAddr])
  @@index([sellerAddr])
  @@index([sellerId])
  @@index([sellerStoreId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id                   String   @id @default(cuid())
  orderId              String
  listingId            String // ID do produto/serviço
  kind                 String // 'product' | 'service'
  qty                  Int
  unitPriceBzrSnapshot Decimal  @db.Decimal(30, 0) // preço unitário em planck no momento do pedido
  titleSnapshot        String // título no momento do pedido
  lineTotalBzr         Decimal  @db.Decimal(30, 0) // qty * unitPrice em planck
  createdAt            DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([listingId])
  @@index([kind])
}

model PaymentIntent {
  id            String              @id @default(cuid())
  orderId       String
  amountBzr     Decimal             @db.Decimal(30, 0) // planck
  escrowAddress String
  status        PaymentIntentStatus @default(PENDING)
  txHashIn      String? // hash do depósito
  txHashRelease String?
  txHashRefund  String?
  createdAt     DateTime            @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([status])
  @@index([createdAt])
}

model EscrowLog {
  id          String   @id @default(cuid())
  orderId     String
  kind        String // 'RELEASE_REQUEST' | 'REFUND_REQUEST' | 'TIMEOUT' | ...
  payloadJson Json
  createdAt   DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([kind])
  @@index([createdAt])
}

/// --- Social / Profiles ---

model Profile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  handle         String   @unique
  displayName    String
  bio            String?  @db.Text
  avatarUrl      String?
  bannerUrl      String?
  externalLinks  Json?
  followersCount Int      @default(0)
  followingCount Int      @default(0)
  postsCount     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // === NFT/Identidade Soberana ===
  onChainProfileId BigInt?   @unique @db.BigInt
  reputationScore  Int       @default(0)
  reputationTier   String    @default("bronze")
  metadataCid      String?
  isVerified       Boolean   @default(false)
  lastChainSync    DateTime?

  // Relations
  posts            Post[]
  followers        Follow[]                 @relation("follows_following")
  following        Follow[]                 @relation("follows_follower")
  badges           ProfileBadge[]
  reputationEvents ProfileReputationEvent[]
  handleHistory    HandleHistory[]

  @@index([onChainProfileId])
  @@index([reputationScore])
  @@index([reputationTier])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  Profile @relation("follows_follower", fields: [followerId], references: [id])
  following Profile @relation("follows_following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followingId])
}

model SellerProfile {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  shopName          String
  shopSlug          String   @unique
  about             String?  @db.Text
  ratingAvg         Float    @default(0)
  ratingCount       Int      @default(0)
  policies          Json?
  avatarUrl         String?
  bannerUrl         String?
  isDefault         Boolean  @default(false)
  onChainStoreId    BigInt?  @db.BigInt
  ownerAddress      String?
  operatorAddresses String[] @default([])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // === Campos de Sincronização On-Chain ===
  syncStatus       String?   @default("pending") // 'pending' | 'syncing' | 'synced' | 'error'
  version          Int?      @default(0) // versão incremental da loja on-chain
  lastSyncBlock    BigInt?   @db.BigInt // último bloco onde foi feita sincronização
  lastPublishedAt  DateTime? // timestamp da última publicação on-chain
  metadataCid      String? // CID do JSON de metadados da loja (store.json)
  categoriesCid    String? // CID do JSON de categorias
  categoriesHash   String? // SHA-256 do JSON de categorias
  productsCid      String? // CID do JSON de produtos/catálogo
  productsHash     String? // SHA-256 do JSON de produtos/catálogo

  // Relations
  products       Product[]
  services       ServiceOffering[]
  publishHistory StorePublishHistory[]

  @@index([userId])
  @@index([onChainStoreId])
  @@index([ownerAddress])
  @@index([operatorAddresses], type: Gin)
  @@index([syncStatus])
}

model Post {
  id        String     @id @default(cuid())
  authorId  String
  author    Profile    @relation(fields: [authorId], references: [id])
  kind      String // 'text' | 'image' | 'link' (MVP: text)
  content   String     @db.Text
  media     Json?
  status    PostStatus @default(PUBLISHED)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  likes    PostLike[]
  comments PostComment[]

  @@index([authorId, createdAt])
  @@index([status])
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  profileId String
  createdAt DateTime @default(now())

  @@unique([postId, profileId])
  @@index([postId])
  @@index([profileId])
}

model PostComment {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  content   String   @db.Text
  parentId  String? // Para respostas aninhadas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent  PostComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies PostComment[] @relation("CommentReplies")

  @@index([postId, createdAt])
  @@index([authorId])
  @@index([parentId])
}

model ProfileBadge {
  id           String    @id @default(cuid())
  profileId    String
  profile      Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  code         String
  label        Json // {pt, en, es}
  issuedBy     String // marketplace, dao, system, etc
  issuedAt     DateTime
  blockNumber  BigInt    @db.BigInt
  revokedAt    DateTime?
  revokeReason String?

  @@unique([profileId, code])
  @@index([profileId])
  @@index([code])
  @@index([issuedAt])
}

model ProfileReputationEvent {
  id          String   @id @default(cuid())
  profileId   String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  eventCode   String // ORDER_COMPLETED, DELIVERY_DONE, etc
  delta       Int
  newTotal    Int
  reason      String?
  emittedBy   String // marketplace, delivery, social, etc
  blockNumber BigInt   @db.BigInt
  extrinsicId String?
  createdAt   DateTime @default(now())

  @@index([profileId, createdAt])
  @@index([eventCode])
  @@index([blockNumber])
}

model HandleHistory {
  id          String   @id @default(cuid())
  profileId   String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  oldHandle   String?
  newHandle   String
  changedAt   DateTime
  blockNumber BigInt   @db.BigInt

  @@index([profileId, changedAt])
  @@index([newHandle])
}

model Dao {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  ownerUserId String?
  owner       User?   @relation(fields: [ownerUserId], references: [id])

  @@index([ownerUserId])
}

model SubDao {
  id          String @id @default(cuid())
  daoId       String
  name        String
  slug        String @unique
  ownerUserId String // User.id (dono/admin)

  @@index([ownerUserId])
}

model ProfileSubDao {
  id        String   @id @default(cuid())
  profileId String
  subDaoId  String
  role      String // 'owner' | 'admin' | 'member'
  createdAt DateTime @default(now())

  @@unique([profileId, subDaoId])
}

/// --- P2P (Offers / Orders) ---

enum P2POfferSide {
  BUY_BZR
  SELL_BZR
}

enum P2POfferStatus {
  ACTIVE
  PAUSED
  ARCHIVED
}

enum P2POrderStatus {
  DRAFT
  AWAITING_ESCROW
  AWAITING_FIAT_PAYMENT
  AWAITING_CONFIRMATION
  RELEASED
  EXPIRED
  CANCELLED
  DISPUTE_OPEN
  DISPUTE_RESOLVED_BUYER
  DISPUTE_RESOLVED_SELLER
}

enum P2PPaymentMethod {
  PIX
}

model P2PPaymentProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  pixKey      String?
  bankName    String?
  accountName String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model P2POffer {
  id             String           @id @default(cuid())
  ownerId        String
  side           P2POfferSide
  priceBRLPerBZR Decimal          @db.Decimal(18, 2)
  minBRL         Decimal          @db.Decimal(18, 2)
  maxBRL         Decimal          @db.Decimal(18, 2)
  method         P2PPaymentMethod
  autoReply      String?
  status         P2POfferStatus   @default(ACTIVE)
  stats          Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([ownerId, status, side])
}

model P2POrder {
  id             String           @id @default(cuid())
  offerId        String
  makerId        String
  takerId        String
  side           P2POfferSide
  priceBRLPerBZR Decimal          @db.Decimal(18, 2)
  amountBZR      Decimal          @db.Decimal(38, 18)
  amountBRL      Decimal          @db.Decimal(18, 2)
  method         P2PPaymentMethod
  status         P2POrderStatus   @default(DRAFT)

  escrowTxHash   String?
  escrowAt       DateTime?
  releasedTxHash String?
  releasedAt     DateTime?

  pixKeySnapshot  String?
  payerDeclaredAt DateTime?
  proofUrls       Json?

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([makerId, takerId, status])
  @@index([offerId])
}

model P2PMessage {
  id        String   @id @default(cuid())
  orderId   String
  senderId  String
  body      String   @db.Text
  kind      String
  createdAt DateTime @default(now())

  @@index([orderId, createdAt])
}

model P2PDispute {
  id         String   @id @default(cuid())
  orderId    String   @unique
  openedById String
  reason     String
  evidence   Json?
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model P2PReview {
  id        String   @id @default(cuid())
  orderId   String   @unique
  raterId   String
  rateeId   String
  stars     Int
  comment   String?
  createdAt DateTime @default(now())
}

/// --- Store Publishing History ---

model StorePublishHistory {
  id              String        @id @default(cuid())
  sellerProfileId String
  sellerProfile   SellerProfile @relation(fields: [sellerProfileId], references: [id], onDelete: Cascade)
  version         Int // versão incremental
  blockNumber     BigInt        @db.BigInt // bloco em que foi publicado
  extrinsicHash   String? // hash da extrinsic do publish_store
  metadataCid     String // CID do JSON de metadados da loja
  categoriesCid   String // CID do JSON de categorias
  categoriesHash  String // SHA-256 do JSON de categorias
  productsCid     String // CID do JSON de produtos/catálogo
  productsHash    String // SHA-256 do JSON de produtos/catálogo
  publishedAt     DateTime      @default(now())

  @@index([sellerProfileId, version])
  @@index([blockNumber])
  @@index([publishedAt])
}

/// --- Store Snapshots (Cache) ---

model StoreSnapshot {
  id             String   @id @default(cuid())
  storeId        String
  version        Int
  storeJson      Json
  categoriesJson Json?
  productsJson   Json?
  cachedAt       DateTime @default(now())

  @@unique([storeId, version])
  @@index([storeId])
  @@index([cachedAt])
}
