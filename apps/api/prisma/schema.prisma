// path: apps/api/prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm]
}

model MediaAsset {
  id          String   @id @default(cuid())
  url         String   // FS: /uploads/abc.png; S3: URL pública
  mime        String
  size        Int
  contentHash String
  ownerType   String?
  ownerId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerType, ownerId])
  @@index([contentHash])
}

model Category {
  id           String    @id
  slug         String    @unique
  parentId     String?
  kind         String    // "product" | "service"
  level        Int       // 1..4
  namePt       String
  nameEn       String
  nameEs       String
  pathSlugs    String[]
  pathNamesPt  String[]
  pathNamesEn  String[]
  pathNamesEs  String[]
  active       Boolean   @default(true)
  sort         Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  products     Product[]
  services     ServiceOffering[]

  @@index([slug])
  @@index([kind, level])
  @@index([parentId])
  @@index([pathSlugs], type: Gin)
}

model CategorySpec {
  id           String   @id @default(cuid())
  categoryId   String
  version      String   // semântico, ex: 1.0.0
  inheritsFrom String?  // opcional (outro categoryId)
  jsonSchema   Json
  uiSchema     Json
  indexHints   String[]
  createdAt    DateTime @default(now())

  @@unique([categoryId, version])
  @@index([categoryId])
}

model Product {
  id                    String   @id @default(uuid())
  daoId                 String
  title                 String
  description           String?
  priceBzr              Decimal  @db.Decimal(20,12)
  categoryId            String
  categoryPath          String[]
  attributes            Json
  attributesSpecVersion String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  category              Category @relation(fields: [categoryId], references: [id])

  @@index([daoId])
  @@index([categoryId])
  @@index([categoryPath], type: Gin)
  @@index([title])
  @@index([description])
  @@index([attributes], type: Gin)
  @@index([priceBzr])
  @@index([createdAt])
}

model ServiceOffering {
  id                    String   @id @default(uuid())
  daoId                 String
  title                 String
  description           String?
  basePriceBzr          Decimal? @db.Decimal(20,12)
  categoryId            String
  categoryPath          String[]
  attributes            Json
  attributesSpecVersion String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  category              Category @relation(fields: [categoryId], references: [id])

  @@index([daoId])
  @@index([categoryId])
  @@index([categoryPath], type: Gin)
  @@index([title])
  @@index([description])
  @@index([attributes], type: Gin)
  @@index([basePriceBzr])
  @@index([createdAt])
}

model AuditLog {
  id        String   @id @default(cuid())
  entity    String
  entityId  String
  actor     String?
  action    String
  diff      Json?
  ip        String?
  ua        String?
  createdAt DateTime @default(now())

  @@index([entity, entityId])
  @@index([createdAt])
}

model User {
  id        String   @id @default(uuid())
  address   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]
}

model AuthNonce {
  id        String   @id @default(uuid())
  address   String
  nonce     String   @unique
  domain    String
  uri       String
  genesis   String
  issuedAt  DateTime
  expiresAt DateTime
  usedAt    DateTime?

  @@index([address])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  tokenHash String   @unique
  createdAt DateTime @default(now())
  revokedAt DateTime?
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
